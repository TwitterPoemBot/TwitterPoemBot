Metadata-Version: 1.1
Name: requests-oauthlib
Version: 0.4.0
Summary: OAuthlib authentication support for Requests.
Home-page: https://github.com/requests/requests-oauthlib
Author: Kenneth Reitz
Author-email: me@kennethreitz.com
License: ISC
Description: Requests-OAuthlib
        =================
        
        This project provides first-class OAuth library support for `Requests <http://python-requests.org>`_.
        
        The OAuth 1 workflow
        --------------------
        
        OAuth 1 can seem overly complicated and it sure has its quirks. Luckily,
        requests_oauthlib hides most of these and let you focus at the task at hand.
        
        Accessing protected resources using requests_oauthlib is as simple as:
        
        .. code-block:: pycon
        
            >>> from requests_oauthlib import OAuth1Session
            >>> twitter = OAuth1Session('client_key',
                                        client_secret='client_secret',
                                        resource_owner_key='resource_owner_key',
                                        resource_owner_secret='resource_owner_secret')
            >>> url = 'https://api.twitter.com/1/account/settings.json'
            >>> r = twitter.get(url)
        
        Before accessing resources you will need to obtain a few credentials from your
        provider (i.e. Twitter) and authorization from the user for whom you wish to
        retrieve resources for. You can read all about this in the full
        `OAuth 1 workflow guide on RTD <http://requests-oauthlib.readthedocs.org/en/latest/oauth1_workflow.html>`_.
        
        The OAuth 2 workflow
        --------------------
        
        OAuth 2 is generally simpler than OAuth 1 but comes in more flavours. The most
        common being the Authorization Code Grant, also known as the WebApplication
        flow.
        
        Fetching a protected resource after obtaining an access token can be as simple as:
        
        .. code-block:: pycon
        
            >>> from requests_oauthlib import OAuth2Session
            >>> google = OAuth2Session(r'client_id', token=r'token')
            >>> url = 'https://www.googleapis.com/oauth2/v1/userinfo'
            >>> r = google.get(url)
        
        Before accessing resources you will need to obtain a few credentials from your
        provider (i.e. Google) and authorization from the user for whom you wish to
        retrieve resources for. You can read all about this in the full
        `OAuth 2 workflow guide on RTD <http://requests-oauthlib.readthedocs.org/en/latest/oauth2_workflow.html>`_.
        
        Installation
        -------------
        
        To install requests and requests_oauthlib you can use pip:
        
        .. code-block:: bash
        
            $ pip install requests requests_oauthlib
        
        
        History
        -------
        
        v0.4.0 (29 September 2013)
        ++++++++++++++++++++++++++
        - OAuth1Session methods only return unicode strings. #55.
        - Renamed requests_oauthlib.core to requests_oauthlib.oauth1_auth for consistency. #79.
        - Added Facebook compliance fix and access_token_response hook to OAuth2Session. #63.
        - Added LinkedIn compliance fix.
        - Added refresh_token_response compliance hook, invoked before parsing the refresh token.
        - Correctly limit compliance hooks to running only once!
        - Content type guessing should only be done when no content type is given
        - OAuth1 now updates r.headers instead of replacing it with non case insensitive dict
        - Remove last use of Response.content (in OAuth1Session). #44.
        
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Natural Language :: English
Classifier: License :: OSI Approved :: BSD License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2.6
Classifier: Programming Language :: Python :: 2.7
